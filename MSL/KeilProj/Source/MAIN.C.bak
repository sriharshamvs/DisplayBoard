#include <82Gxx.h>
#include <string.h>
#include ".\include\H_16_Eng.h"
//#include ".\include\H_16_Eng.h"

#define MAX 60
#define CHAR 350
#define NOCHAR 600
#define DELAY 500
#define ANI 5

#define RXBUFFSIZE	160

xdata unsigned char Buff1[1600] _at_ 0x0000; 
xdata unsigned char Buff2[1600]; 
xdata unsigned char Buff3[1600];
xdata unsigned char dport[1600] _at_ 0x8000;
xdata unsigned char Zero[1];

unsigned char temp_char=0;
unsigned char RECIEVEbuffer[RXBUFFSIZE+1];
static unsigned char rxBytes=0;
bit rxReadyFlag = 0;

unsigned int Offset=0,Check=0,Glob=0;
unsigned int Check1=0;
unsigned char row,Count=0,Ext1=0,Ext2=0;
unsigned int Get1=0, Get2=0;
bit DInt=1;

const unsigned char Mess1[] = {"WELCOME"};
const unsigned char Mess2[] = {" WELCOMES YOU"}; //English


void LeftToRight(void); // right to left
void Display1(void); // still
void Display2(void); // rolling top to bottom & bottom to top
void Delay(unsigned int);
void ECharLoad(unsigned char);
void TCharLoad(unsigned char);
void Blank0(void);
void Blank1();
void AddBlank(void);
void Start(void);
void ProcessData(void);
void Center(void);
unsigned char GetEffect(void);
void Load(void);
void InitilizeSerial(void);
unsigned char Getch(void);
//interrupt void SerialInt(void);

void TIMER_INIT(void);
void SERIAL_INIT(void);
void SERIAL_TRANSMIT(unsigned char tx_char);
void SERIAL_STRING_TX(unsigned char *tx_String);
void SERIAL_STRING_TX_LN(unsigned char *tx_String);
void ValidateSerialData(void);

void main (void){
	TIMER_INIT();
	SERIAL_INIT();
	Delay(1);
	//SERIAL_STRING_TX_LN(Mess1);
	DInt = 1;
	Start();
	while(1){
		ValidateSerialData();
		ProcessData();
		Glob=0;
	}
}

/*void main(void)
{
    Blank0();
    InitilizeSerial();
    EA=1;
        if(Buff1[0] != '0')
                Start();
				
		Delay(250);

    for(;;)
    {
       DInt = 1;
			 ProcessData();
			
			SBUF = '1';
    }
} */


void Start(void){
	unsigned int i=0,j=0;
	
	//Mess1
	/*Buff1[j++] = '0';
	Buff1[j++] = '1';
	Buff1[j++] = '~';
	Buff1[j++] = 'e';
	*/
	Buff1[0] = '\0';
	i=0;
	Buff1[j++] = '~';
	while(Mess1[i] != 0)
		Buff1[j++] = Mess1[i++];

	Buff1[j++] = '^';
	//End
	Buff1[j++] = '\0';
}

void ProcessData(void){
	unsigned char j;
	Glob=0;
	while((Buff1[Glob] != 0) && (DInt)){
		switch(GetEffect()){
			case 0: //Right To Left
			{
				Top0:
				Offset=0;
				AddBlank();
				Offset = MAX;
				Check1 = (10000-(2*MAX)-40);
				Load();
				AddBlank();
				Check=0;
				while(Check < Offset){
					LeftToRight();
					Check++;
				} 
				if(Check1 == 1)
					goto Top0;
				break;
			}
		  case 1: //Still
			{
				Top1:
				Offset=0;
				AddBlank();
				Offset = MAX;
				Check1 = (2*MAX);
				Load();
				AddBlank();
				Center();
				for(j=0;j<=DELAY;j++)
					Display1();
				if(Check1 == 1)
					goto Top1;
				break;
			}
			case 2: //RollDown
			{ 
				Top2:
				Offset=0;
				AddBlank();
				Offset = MAX;
				Check1 = (2*MAX);
				Load();
				AddBlank();
				Center();
				Ext1=0x00;Ext2=0x00;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0x01;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0x03;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0x07;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0x0F;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0x1F;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0x3F;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0x7F;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0xFF;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0x01;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0x03;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0x07;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0x0F;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0x1F;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0x3F;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0x7F;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0xFF;
				for(j=0;j<=ANI;j++)
					Display2();
				for(j=0;j<=DELAY;j++)
					Display2();
				if(Check1 == 1)
					goto Top2;
				break;
			}
			case 3: //RollTop
			{
			Top3:
				Offset=0;
				AddBlank();
				Offset=MAX;
				Check1=(2*MAX);
				Load();
				AddBlank();
				Center();
				Ext1=0x00;Ext2=0x00;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0x80;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0xC0;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0xE0;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0xF0;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0xF8;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0xFC;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0xFE;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext2 = 0xFF;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0x80;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0xC0;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0xE0;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0xF0;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0xF8;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0xFC;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0xFE;
				for(j=0;j<=ANI;j++)
					Display2();
				Ext1 = 0xFF;
				for(j=0;j<=ANI;j++)
					Display2();
				for(j=0;j<=DELAY;j++)
					Display2();
				if(Check1 == 1)
					goto Top3;
				break;
			}
		}
	Glob++;
	}
}

unsigned char GetEffect(void){
	unsigned char returnValue = 0;
	if((Buff1[Glob++] == '0') && (Buff1[Glob++] == '0')) //Right To Left
		returnValue = 0;
	//return(0); 
  //Glob-=2;     
  else if((Buff1[Glob++] == '0') && (Buff1[Glob++] == '1')) //Still
		returnValue = 1;
	//return(1);
  //Glob-=2;      
  else if((Buff1[Glob++] == '0') && (Buff1[Glob++] == '2')) //Roll Down
		returnValue = 2;
		//return(2); 
  //Glob-=2;   
  else if ((Buff1[Glob++] == '0') && (Buff1[Glob++] == '3')) //Roll Top
		returnValue = 3;
	
		//return(3);
  //Glob-=2;  
	return returnValue;
}

void Load(void){
	//unsigned char Lang=0,i,n,ch;
	unsigned int i=0;
	unsigned char Lang=0;
	Glob=0; 
	while((Buff1[Glob] != '^') && (DInt)){
		rxReadyFlag = 0;
		/*if(Buff1[Glob] == '~'){
			Glob++;
			if(Buff1[Glob] == 'e'){
				Lang=0;
			}
		}*/
		//else{
		//Glob++;
				ECharLoad(Buff1[Glob]);
			if(Offset > Check1){
				Check1 = 1;
				Offset -= Count;
				AddBlank();
			}
		//}
  Glob++;
 }
}

void Center(void){
	unsigned int i;
  i = (Offset - MAX);
  if(i <= MAX){
		Check = (MAX - ((MAX-i)/2));
  }
  else	Check = MAX;
}

/*void SerialInt (void) interrupt 4{
	unsigned int i=0;
  unsigned char Ch;
  EA=0;
	//SET_VECTOR(SINT,SerialInt);
	Start();
  Ch = Getch();
  if(Ch == '~'){
		EA=1;
    Ch=Getch();
    while((Ch != '^') && (i < (NOCHAR-1))){
			Buff1[i++] = Ch;
      EA=1;
      Ch=Getch();
      if(Ch == 1)
				break;
    }
    Buff1[i]=0;
    DInt=0;
    if((Ch == 1) || (Buff1[0] != '0') || (i == (NOCHAR-1))){
			EA=0;
      //Start();
      EA=1;
		}
  }
  EA=1;
}

unsigned char Getch(void){
	Get1=0;
  Get2=0;
  while((!RI) && (Get2 < 2)){
		Get1++;
    if(Get1 >= 60000){
			Get1 = 0;
      Get2++;
    }
  }
  RI = 0;
  if(Get2 >= 2)
		return 1;       
  else
		return SBUF;
}
*/

void ECharLoad(unsigned char n){
	unsigned char i,j=1;
  if((n >= ' ') && (n <= '}')){
		n -= ' ';
    Count = H_16_Eng[n][0];
    for(i=0;i<Count;i++){
			Buff2[Offset+i] = H_16_Eng[n][j];
			Buff3[Offset+i] = H_16_Eng[n][j+1];
      j+=2;
    }
    Offset += Count;
    for(i=0;i<2;i++){
			Buff2[Offset+i] = 0;
      Buff3[Offset+i] = 0;
    }
    Offset += 2;
  }
	//SERIAL_STRING_TX_LN("Exectued ECharLoad");
}

void AddBlank(void){
    unsigned int i=0;
    for(i=0;i<MAX;i++){ 
        Buff2[Offset+i] = 0x00;
        Buff3[Offset+i] = 0x00;
    }
}

void LeftToRight(void){
	unsigned char i;
	for(row=0;((row<=9) && (DInt));row++){					
		for(i=0;i<7;i++){
			//Borad 1 - 8000
			dport[0] = row;
			dport[1] = Buff2[row+Check];
			dport[2] = Buff3[row+Check];
			dport[3] = Buff2[9+row+Check];
			dport[4] = Buff3[9+row+Check];

			//Borad 2 - 8010
			dport[16] = row;
			dport[17] = Buff2[18+row+Check];
			dport[18] = Buff3[18+row+Check];
			dport[19] = Buff2[27+row+Check];
			dport[20] = Buff3[27+row+Check];

			//Borad 3 - 8020
			dport[32] = row;
			dport[33] = Buff2[36+row+Check];
			dport[34] = Buff3[36+row+Check];
			dport[35] = Buff2[45+row+Check];
			dport[36] = Buff3[45+row+Check];

		}
	Blank0();
	}
}

void Display1(void){
	for(row=0;((row<=9) && (DInt));row++){
		//Borad 1 - 8000
		dport[0] = row;
		dport[1] = Buff2[row+Check];
		dport[2] = Buff3[row+Check];
		dport[3] = Buff2[10+row+Check];
		dport[4] = Buff3[10+row+Check];

		//Borad 2 - 8010
		dport[16] = row;
		dport[17] = Buff2[20+row+Check];
		dport[18] = Buff3[20+row+Check];
		dport[19] = Buff2[30+row+Check];
		dport[20] = Buff3[30+row+Check];

		//Borad 3 - 8020
		dport[32] = row;
		dport[33] = Buff2[40+row+Check];
		dport[34] = Buff3[40+row+Check];
		dport[35] = Buff2[50+row+Check];
		dport[36] = Buff3[50+row+Check];

		Blank0();
	}
}

void Display2(void){
	for(row=0;((row<=9) && (DInt));row++){
		//Borad 1 - 8000
		dport[0] = row;
		dport[1] = Buff2[row+Check] & Ext1;
		dport[2] = Buff3[row+Check] & Ext2;
		dport[3] = Buff2[10+row+Check] & Ext1;
		dport[4] = Buff3[10+row+Check] & Ext2;

		//Borad 2 - 8010
		dport[16] = row;
		dport[17] = Buff2[20+row+Check] & Ext1;
		dport[18] = Buff3[20+row+Check] & Ext2;
		dport[19] = Buff2[30+row+Check] & Ext1;
		dport[20] = Buff3[30+row+Check] & Ext2;

		//Borad 3 - 8020
		dport[32] = row;
		dport[33] = Buff2[40+row+Check] & Ext1;
		dport[34] = Buff3[40+row+Check] & Ext2;
		dport[35] = Buff2[50+row+Check] & Ext1;
		dport[36] = Buff3[50+row+Check] & Ext2;

		Blank1();
	}
}

void Blank0(void){
	unsigned char Temp1=0;
  unsigned int Temp2=0;

  //Borad 1 - 8000
			Zero[0] = 0;
	dport[1] = Zero[0+Temp1+Temp2];
	dport[2] = Zero[0+Temp1+Temp2];
	dport[3] = Zero[0+Temp1+Temp2];
	dport[4] = Zero[0+Temp1+Temp2];
			
	//Borad 2 - 8010
			Zero[0] = 0;
	dport[17] = Zero[0+Temp1+Temp2];
	dport[18] = Zero[0+Temp1+Temp2];
	dport[19] = Zero[0+Temp1+Temp2];
	dport[20] = Zero[0+Temp1+Temp2];

	//Borad 3 - 8020
			Zero[0] = 0;
	dport[33] = Zero[0+Temp1+Temp2];
	dport[34] = Zero[0+Temp1+Temp2];
	dport[35] = Zero[0+Temp1+Temp2];
	dport[36] = Zero[0+Temp1+Temp2];

}

void Blank1(void){
	unsigned char Temp1=0;
  unsigned int Temp2=0;

  //Borad 1 - 8000
			Zero[0] = 0;
	dport[1] = Zero[0+Temp1+Temp2] & Temp1;
	dport[2] = Zero[0+Temp1+Temp2] & Temp1;
	dport[3] = Zero[0+Temp1+Temp2] & Temp1;
	dport[4] = Zero[0+Temp1+Temp2] & Temp1;
			
	//Borad 2 - 8010
			Zero[0] = 0;
	dport[17] = Zero[0+Temp1+Temp2] & Temp1;
	dport[18] = Zero[0+Temp1+Temp2] & Temp1;
	dport[19] = Zero[0+Temp1+Temp2] & Temp1;
	dport[20] = Zero[0+Temp1+Temp2] & Temp1;

	//Borad 3 - 8020
			Zero[0] = 0;
	dport[33] = Zero[0+Temp1+Temp2] & Temp1;
	dport[34] = Zero[0+Temp1+Temp2] & Temp1;
	dport[35] = Zero[0+Temp1+Temp2] & Temp1;
	dport[36] = Zero[0+Temp1+Temp2] & Temp1;

}

void Delay(unsigned int n){
	unsigned int i;
  for(i=0;i<=n ;i++);
}

void SERIAL_INIT(void){
	SCON=0x50;
	PCON |=0X80;
	TMOD&=0xCF; 
	TMOD|=0x20; 
	TH1=0xFA;   // setting buadrate to 9600 bps
	TL1=0x00;
	TR1=1;
	ES = 1;
	IE &= 0x90;  
	SERIAL_STRING_TX_LN("Serial Initialized");
} // SERIAL_INIT ends here

void TIMER_INIT(void){
	TMOD=0x00;
	IE=0x00;
	TR0=0;
	TF0=0;
	TMOD|=0x01;
	IE|=0x82;
	TH0=0xF8;   // setting 1ms timer
	TL0=0xCD;
	TR0=1;
} // TIMER_INIT ends here

void SERIAL_STRING_TX(unsigned char *tx_String){   // For sending a String
	unsigned int i,stringSize;
	
	stringSize = strlen(tx_String); // Calculate the String length
	for(i=0;i<stringSize;i++){
		temp_char = tx_String[i];  
		SERIAL_TRANSMIT(temp_char);  // Send each character to the SERIAL_TRANSMIT function
	}
}

void SERIAL_TRANSMIT(unsigned char tx_char){  // For sending each character
	SBUF=tx_char;  //Store the incoming character in SUBF
	while(TI==0);  // Wait until Tx bit is High
	TI=0;   // Make it 0 once it's high
}

void SERIAL_STRING_TX_LN(unsigned char *tx_String){   // For sending a String
	unsigned int i,stringSize;
	unsigned char temp_char=0;
	
	stringSize = strlen(tx_String); // Calculate the String length
	for(i=0;i<stringSize;i++){
		temp_char = tx_String[i];  
		SERIAL_TRANSMIT(temp_char);  // Send each character to the SERIAL_TRANSMIT function
	}
	SERIAL_TRANSMIT('\r');
	SERIAL_TRANSMIT('\n');
}

void SERIAL_RECIEVE(void) interrupt 4{
	char value;
	unsigned int i=0;
	DInt = 0;
	if(RI){
		value = SBUF;
		RECIEVEbuffer[rxBytes++] = value;
		if(value == '^'){	
			rxReadyFlag=1 ;
		  SBUF = 1;
		}
		RI = 0;
	}
	if(rxBytes > RXBUFFSIZE)
		rxBytes = 0;
}

void ValidateSerialData(void){
	unsigned char i = 0;
	if(RECIEVEbuffer[0]=='~' && RECIEVEbuffer[rxBytes-1]=='^'){
		SERIAL_STRING_TX_LN("Jai Sri Ram");
		for (i=0;i<rxBytes;i++){
			Buff1[i] = RECIEVEbuffer [i];
		}
		rxBytes=0;	
		DInt = 1;
	}	
}